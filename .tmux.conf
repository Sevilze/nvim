# Set the prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# Enable mouse support
set -g mouse on

# Start window numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when a window is closed
set -g renumber-windows on

# Allow raw kitty escapes to pass through
set -g allow-passthrough on

# Change window navigation to use window index
unbind n  # unbind default next-window binding
unbind p  # unbind default previous-window binding
bind i choose-window  # bind window index navigation to Ctrl+Space i

# Increase scrollback buffer size
set -g history-limit 10000

# Set terminal color to 256 colors
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -g status-position top

# Configure window status format with dev icons
set -g window-status-format "#{pane_icon} #I:#W#{?window_flags,#{window_flags}, }"
set -g window-status-current-format "#{pane_icon} #I:#W#{?window_flags,#{window_flags}, }"

# Split panes using | and -
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Create new window with current path
bind c new-window -c "#{pane_current_path}"

# Reload config file & install plugins
bind r display-popup -E -w 80% -h 60% "cd $HOME/.config/nvim && \
cp .tmux.conf ~/.tmux.conf > /dev/null 2>&1 && \
tmux source-file ~/.tmux.conf > /dev/null 2>&1 && \
echo 'Running plugin installation...' && \
~/.tmux/plugins/tpm/bin/install_plugins > /tmp/tmux_plugin_install.log 2>&1 && \
tmux run-shell '~/.tmux/plugins/tpm/tpm' > /dev/null 2>&1 && \
echo '===== Tmux Configuration Reloaded =====' && \
echo 'Configuration file copied to: ~/.tmux.conf' && \
echo 'Configuration file reloaded successfully' && \
echo '' && \
echo '--- Sesh Configuration ---' && \
bash scripts/manage_sesh_config.sh update && \
echo '' && \
echo '--- Installation Results ---' && \
echo 'Newly installed:' && \
grep -E 'Installing' /tmp/tmux_plugin_install.log | sed 's/Installing /‚úì /g' | sed 's/ plugin//g' && \
echo && \
echo 'Already installed:' && \
grep -E 'Already installed' /tmp/tmux_plugin_install.log | sed 's/Already installed /‚úì /g' | sed 's/ plugin//g' && \
echo && \
if grep -q 'Error' /tmp/tmux_plugin_install.log; then \
  echo 'Errors during installation:' && \
  grep -E 'Error' /tmp/tmux_plugin_install.log; \
fi && \
echo && echo 'Press any key to close...' && read -n 1"

# Resize panes with Prefix + arrow keys
bind -r Left resize-pane -L 5
bind -r Down resize-pane -D 5
bind -r Up resize-pane -U 5
bind -r Right resize-pane -R 5

# Vim-like copy mode
setw -g mode-keys vi
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -i 'n\\?vim'"

bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'select-pane -R'

bind-key -n 'M-Left' if-shell "$is_vim" 'send-keys M-Left' 'select-pane -L'
bind-key -n 'M-Down' if-shell "$is_vim" 'send-keys M-Down' 'select-pane -D'
bind-key -n 'M-Up' if-shell "$is_vim" 'send-keys M-Up' 'select-pane -U'
bind-key -n 'M-Right' if-shell "$is_vim" 'send-keys M-Right' 'select-pane -R'

bind-key V run-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -i 'n\\?vim' && echo 'Vim detected' || echo 'Vim NOT detected'"

# Enable focus events (for Vim autoread)
set -g focus-events on

# Reduce escape-time (helps with Vim)
set -sg escape-time 10

unbind-key -T prefix x
unbind-key -T prefix Q
unbind-key -T prefix I

# For windows with any Neovim panes, save state and ask for confirmation; for others, kill immediately
bind-key Q if-shell "$HOME/.config/nvim/scripts/detect_nvim.sh" \
  "display-popup -E -w 80% -h 60% \"echo '===== Neovim State Save =====' && \
   echo 'Detected Neovim instance in window. Saving state before closing...' && \
   echo '' && \
   echo '--- Cleaning swap files ---' && \
   $HOME/.config/nvim/scripts/clean_swap_files.sh && \
   echo '' && \
   echo '--- Saving Harpoon state ---' && \
   cd $HOME/.config/nvim && \
   bash scripts/save_nvim_state.sh && \
   echo '' && \
   echo 'Press any key to continue...' && read -n 1\" \; confirm-before -p \"kill-window #W? (y/n)\" kill-window" \
  "kill-window"

bind-key x if-shell "$HOME/.config/nvim/scripts/detect_nvim_pane.sh" \
  "display-popup -E -w 80% -h 60% \"echo '===== Neovim State Save =====' && \
   echo 'Detected Neovim instance in pane. Saving state before closing...' && \
   echo '' && \
   echo '--- Cleaning swap files ---' && \
   $HOME/.config/nvim/scripts/clean_swap_files.sh && \
   echo '' && \
   echo '--- Saving Harpoon state ---' && \
   cd $HOME/.config/nvim && \
   bash scripts/save_nvim_state.sh && \
   echo '' && \
   echo 'Press any key to continue...' && read -n 1\" \; confirm-before -p \"kill-pane #P? (y/n)\" kill-pane" \
  "kill-pane"

# Add a key binding to manually clean swap files
bind-key C display-popup -E -w 80% -h 40% "echo '===== Neovim Swap File Cleaner =====' && \
echo 'Running swap file cleaner script...' && \
echo '' && \
$HOME/.config/nvim/scripts/clean_swap_files.sh 2>&1 | tee /tmp/nvim_swap_clean.log && \
echo '' && \
echo '‚úì Swap file cleaning complete' && \
echo 'Log saved to: /tmp/nvim_swap_clean.log' && \
echo '' && \
echo 'Press any key to continue...' && read -n 1"

# Add custom key bindings for tmux-resurrect with multi-session support
bind-key S command-prompt -p "Save session as:" "run-shell 'cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh save %1 || tmux display-message \"Error saving session!\"'"
bind-key L command-prompt -p "Restore session:" "run-shell 'cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh restore %1 || tmux display-message \"Error restoring session!\"'"
bind-key M-s display-popup -E -w 80% -h 80% "cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh menu || echo 'Error displaying sessions'"
bind-key M-l display-popup -E -w 80% -h 80% "cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh list || echo 'Error displaying sessions'"
bind-key M-f run-shell "cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh list > /tmp/tmux_sessions.txt && tmux display-message \"Sessions list saved to /tmp/tmux_sessions.txt\""
bind-key M-d command-prompt -p "Delete session:" "run-shell 'cd $HOME && bash $HOME/.config/nvim/scripts/tmux_resurrect_manager.sh delete %1 || tmux display-message \"Error deleting session!\"'"

# Initialize TMUX plugin manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'janoamaral/tokyo-night-tmux'
set -g @plugin 'JK-Flip-Flop96/tmux-dev-icons'

# Configure tmux-resurrect
set -g @resurrect-dir '~/.tmux/resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'

set -g @dev-icons-nvim ""
set -g @dev-icons-vim ""
set -g @dev-icons-git "Û∞ä¢"
set -g @dev-icons-lazygit "Û∞ä¢"
set -g @dev-icons-ssh "Û∞£Ä"
set -g @dev-icons-man "Û∞ãº"
set -g @dev-icons-htop "Û∞®£"
set -g @dev-icons-zsh "Û∞Üç"
set -g @dev-icons-bash "Û∞Üç"
set -g @dev-icons-python "Û∞å†"
set -g @dev-icons-node "Û∞éô"
set -g @dev-icons-npm "Û∞éô"
set -g @dev-icons-go "Û∞üì"
set -g @dev-icons-rust "Û±òó"
set -g @dev-icons-docker "Û∞°®"
set -g @dev-icons-make "Û∞õ•"
set -g @dev-icons-fzf "Û∞úè"

set -g @tokyo-night-tmux_window_tidy_icons 1
set -g @tokyo-night-tmux_show_hostname 1
set -g @tokyo-night-tmux_show_netspeed 1
set -g @tokyo-night-tmux_netspeed_iface "wlan0"
set -g @tokyo-night-tmux_netspeed_showip 1
set -g @tokyo-night-tmux_netspeed_refresh 1

set -g pane-border-style "fg=#3b4261"
set -g pane-active-border-style "fg=#7aa2f7"

bind-key M-c display-popup -E -w 80% -h 60% "cd $HOME/.config/nvim && bash scripts/manage_sesh_config.sh status && echo '' && echo 'Press any key to close...' && read -n 1"
bind-key "T" run-shell "~/go/bin/sesh connect \"$(
  ~/go/bin/sesh list --icons | fzf-tmux -p 80%,70% \
    --no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
    --header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(‚ö°  )+reload(~/go/bin/sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(ü™ü  )+reload(~/go/bin/sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(‚öôÔ∏è  )+reload(~/go/bin/sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(üìÅ  )+reload(~/go/bin/sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(üîé  )+reload(find ~ -maxdepth 2 -type d -not -path "*/\.*" | sort)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(‚ö°  )+reload(~/go/bin/sesh list --icons)' \
    --preview-window 'right:55%' \
    --preview '~/go/bin/sesh preview {}'
)\""

bind -N "switch to root session (via sesh) " 9 run-shell "~/go/bin/sesh connect --root '$(pwd)'"
bind -N "last-session (via sesh) " L run-shell "~/go/bin/sesh last"

run '~/.tmux/plugins/tpm/tpm'
